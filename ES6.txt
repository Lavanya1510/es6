ES6:
   ECMAScript -> scripting language.
ES6:The most recent version of ECMAscript. Very significant update with many changes.First major update since ES6.

New:
-> let and const Declarations.  ->let:Like var. var denoted globally. 
                                  let used to set limit the scope to functions or loops which is very useful.
-> Destructing variables: It helps to destract data from arrays & objects into distinct variables.
-> Classes and Inheritance
-> Template Strings
-> String features
-> Math & Number Features
-> New Data Structures - map and set
-> Iterators 
-> Generators - Functions-pass the value and yiels it
-> Promises & Asynchronous Data 
-> Arrow Functions

Syntax:

Variable:
        let x=0;
	const colors = [];
        colors.push('red');
        colors.push('green');
        console.log(colors);
	const list = ["a","b"];
Loop:
	const list=[1,2,3,4,5]
	for(let i=0; i< list.length; i++){
		console.log(i);
	}

Destructing:
        let { a, b, c } = obj
	
Arrow functions:
        let func = a => {} // parentheses optional with one parameter
        let func = (a, b, c) => {} // parentheses required with multiple parameters
	
	
Concatenation/string interpolation:
	let str = `Release Date: ${date}`
	const name = "Some";
	const age=25;
	console.log("Hello my name is ${name} and m age is ${age}");

Multi-line strings:
        let str = `This text
            is on
            multiple lines`
	  
Implicit returns:
       let func = (a, b, c) => a + b + c
	
Object literals:
	function getBook(title, author){
		return{
			title,
			author
			};
		}
	var book = getBook("Harry Potter","JK");
	console.log(book);
	
Object deconstruction:
	const list = {
		name: "Shopping List",
		items: ["Milk","Cow"]
		};
	const {name, items} = list;
	console.log(name, items)

 Event:
	button.addEventListener('click',function(){
		let that = this;
		var addFade = function(){
			this.style.display = "none";
			};
		});
Default parameters:
	const add = (c+1, d+1) =>{
		console.log(c+d);
		};
	add();
Array Function:
	const shoppingList = ["Milk","Cow","Eggs","Banana","Choco"];
	shoppingList.forEach{(product,index) => {
		console.log('The index is ${index} and the product is ${product}'));
		});
Map:
	const newList = shoppingList.map(item =>{
		item=> item+ "new";
		});
	console.log(newList);
Filter:
	const filterList = shoppingList.filter(item => item === "Eggs");
	console.log(filterList);
	
Constructor functions and classes:
	class Func {
  constructor(a, b) {
    this.a = a
    this.b = b
  }

  getSum() {
    return this.a + this.b
  }
}
let x = new Func(3, 4)
x.getSum() // returns 7

Promises:
	let doSecond = () => {
  console.log('Do second.')
}
let doFirst = new Promise((resolve, reject) => {
  setTimeout(() => {
    console.log('Do first.')

    resolve()
  }, 500)
})

doFirst.then(doSecond)

ES6 callback:
   function makeRequest(method, url) {
  return new Promise((resolve, reject) => {
    let request = new XMLHttpRequest()

    request.open(method, url)
    request.onload = resolve
    request.onerror = reject
    request.send()
  })
}

makeRequest('GET', 'https://url.json')
  .then(event => {
    console.log(event.target.response)
  })
  .catch(err => {
    throw new Error(err)
  })
